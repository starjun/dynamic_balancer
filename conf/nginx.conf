####################     nginx conf by zj     #################


user nobody nobody;

# CPU 的亲源等
    worker_processes  2;
    worker_cpu_affinity  auto;

    worker_rlimit_nofile 100000;
    # ulimit -n 关联

    worker_priority -20;

#错误日志处理
    #error_log logs/error.log crit;
    #error_log logs/error.log debug;
    #编译 增加 --with-debug
    #error_log  logs/error.log notice;
    #error_log  syslog:server=36.110.148.178:514,facility=local6,tag=nginx,severity=error,nohostname;
    error_log  logs/error.log;
    #error_log  logs/error.log  info;

events {
    use epoll;
    accept_mutex off;   #关闭惊群
    worker_connections 65535; #根据你的机器配置
    multi_accept on;
    # 内核 3.9 以上(centos 7+)
    # 配置 reuseport 会 互斥 该参数 accept_mutex;
}

http {

    ### log处理
        log_format  main
            '$remote_addr - $remote_user [$time_local] $request '
            '$request_time $upstream_response_time '
            '"$status" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';
        # access_log off;
        access_log logs/access.log main buffer=32768 flush=3;

        lua_http10_buffering off;
        lua_socket_log_errors off;

    ### 业务相关 ###
        include       mime.types;
        #default_type  application/octet-stream;
        default_type text/html;
        charset utf-8;
        error_page   404 400        /40x.html;
        error_page   500 502 503 504     /50x.html;
        #error_page   500 502 503 504  http://www.baidu.com;

    ###   IO相关
        # 建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存
        open_file_cache max=65535 inactive=60s;
        # 在inactive时间 1 次没有请求就删除
        open_file_cache_min_uses 1;
        # 这个是指多长时间检查一次缓存的有效信息
        open_file_cache_valid 60s;
        open_file_cache_errors on;
        tcp_nopush on;
        tcp_nodelay on;
        server_tokens off;
        sendfile on;

        # request time相关
        keepalive_timeout 30;
        keepalive_requests 10000;
        client_header_timeout 30;
        client_body_timeout 30;
        reset_timedout_connection on;
        send_timeout 30;

        # proxy time 相关
        proxy_connect_timeout    120;
        proxy_read_timeout       120;
        proxy_send_timeout       120;

        # gzip
        #include gzip.conf;

        # 缓存相关
        client_max_body_size 10m;
        client_body_buffer_size 5m;
        client_header_buffer_size 4k;
        #getconf PAGE_SIZE 查看系统分页 linux
        server_names_hash_bucket_size 128;
        large_client_header_buffers 10 128k;

        proxy_headers_hash_max_size 51200;
        proxy_headers_hash_bucket_size 6400;


    ###   反向代理缓存处理
        proxy_cache_path /mnt/ngx_cache/ levels=1:2 keys_zone=my_cache:500m max_size=2g inactive=60m;
        proxy_buffer_size 128k;
        proxy_buffers 4 128k;
        proxy_busy_buffers_size 1024k;
        proxy_temp_file_write_size 1024k;

    ### 全局lua脚本执行
        #lua_socket_log_errors off;
        lua_package_cpath "/opt/openresty/dynamic_upstream/lib/?.so;;";

        # 需要根据自己服务器的情况进行配置
        lua_package_path "/opt/openresty/dynamic_upstream/lib/?.lua;/opt/openresty/lualib/?.lua";

        lua_code_cache on; # 关闭lua_cache 缓存 用于调试， 线上需要开启 设置为on
        #lua_need_request_body on; #开启post

        lua_shared_dict config_dict 50m;    # host.json certs.json 存放
        lua_shared_dict balancer_dict 10m;  # balancer_dict 负载算法使用

        more_set_headers 'Server: dynamic_upstream system';
        resolver 8.8.8.8 ipv6=off;
        #resolver ipv6=off local=on;
        resolver_timeout 5;

        #limit_req_zone  $binary_remote_addr zone=allips:50m rate=15r/s;
        #limit_conn_zone $binary_remote_addr zone=addr:50m;

        init_by_lua_file  /opt/openresty/dynamic_upstream/init.lua;
        rewrite_by_lua_file /opt/openresty/dynamic_upstream/rewrite_all.lua;

    ### upstream 配置节点
    upstream dynamic_upstream{
        server 0.0.0.1;
        balancer_by_lua_file  /opt/openresty/dynamic_upstream/balancer.lua;
        keepalive 30;
    }

    ###   balancer server配置节点
    server {
        listen  80 reuseport;
        listen 443 ssl http2 reuseport;
        root html;


        ssl_certificate     /opt/openresty/dynamic_upstream/conf/server.crt;
        ssl_certificate_key /opt/openresty/dynamic_upstream/conf/server.key;

        ######## other ssl conf
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 50m;
        ########
        # present the correct cert
        ssl_certificate_by_lua_file /opt/openresty/dynamic_upstream/cert.lua;

        #根目录
        location / {
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For  $remote_addr;
            #proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header User-Agent $http_user_agent;
            # proxy cache
            set $p_cache 0;
            proxy_cache my_cache;
            proxy_cache_valid 200 206 14d;
            proxy_cache_valid 301 302 304 1h;
            proxy_cache_valid 403 404 444 1h;
            # proxy_cache_valid 500 502 1h;
            proxy_cache_use_stale    invalid_header http_403 http_404 http_500 http_502;
            proxy_cache_lock      on;
            proxy_cache_lock_timeout  5s;
            proxy_cache_key $scheme$host$request_uri;
            proxy_cache_bypass $cookie_nocache $p_cache;
            proxy_cache_bypass $http_pragma;
            add_header X-Cache "$upstream_cache_status";

            proxy_pass http://dynamic_upstream;

        }
   }

    server {
        listen  5460;
        server_name localhost5460;
        root html;
        #access_log  logs/access.log main;

        #根目录
        location / {
            #limit_req zone=allips nodelay;
            content_by_lua_block {
                ngx.say('Hello,world!')
             }
        }

        location /purge/ {
            allow           127.0.0.1;
            # deny            all;
            set $purge_key "";
            content_by_lua_block{
                local key = ngx.unescape_uri(ngx.var.arg_purge_key)
                ngx.var.purge_key = ngx.decode_base64(key)
            }
            proxy_cache_purge my_cache $purge_key;
        }

        location ~ ^/api/([-_a-zA-Z0-9/]+) {

            #内容生成阶段
            content_by_lua_file "/opt/openresty/dynamic_upstream/api/$1.lua";
        }


    }

    include backend_demo.conf;

}